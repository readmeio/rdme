{
  "extends": ["@readme/eslint-config", "@readme/eslint-config/typescript"],
  "root": true,
  "parserOptions": {
    "ecmaVersion": 2020
  },
  "overrides": [
    {
      "files": ["bin/set-version-output.js", "bin/set-major-version-tag.js", "config/*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ],
  "rules": {
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          // We specify `{}` in `CommandOptions` generics when those commands don't have their own
          // options and it's cleaner for us to do that than `Record<string, unknown>`.
          "{}": false
        }
      }
    ],

    /**
     * Because our command classes have a `run` method that might not always call `this` we need to
     * explicitly exclude `run` from this rule.
     */
    "class-methods-use-this": ["error", { "exceptMethods": ["run"] }],

    /**
     * This is a small rule to prevent us from using console.log() statements in our commands.
     *
     * We've had troubles in the past where our test coverage required us to use Jest mocks for
     * console.log() calls, hurting our ability to write resilient tests and easily debug issues.
     *
     * We should be returning Promise-wrapped values in our main command functions
     * so we can write robust tests and take advantage of `bin/rdme`,
     * which we use for printing function outputs and returning correct exit codes.
     *
     * Furthermore, we should also be using our custom loggers (see src/lib/logger.js)
     * instead of using console.info() or console.warn() statements.
     */
    "no-console": "warn",

    "no-restricted-syntax": "off",

    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "node-fetch",
            "importNames": ["default"],
            "message": "Avoid using `node-fetch` directly and instead use the fetch wrapper located in `lib/fetch.ts`. See CONTRIBUTING.md for more information."
          }
        ]
      }
    ]
  }
}
