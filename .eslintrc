{
  "extends": ["@readme/eslint-config", "@readme/eslint-config/typescript", "@readme/eslint-config/esm"],
  "root": true,
  "overrides": [
    {
      "files": ["bin/*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off",
      },
    },
  ],
  "env": {
    "es2021": true,
    "node": true,
  },
  "parserOptions": {
    "sourceType": "module",
  },
  "rules": {
    // We specify `{}` in `CommandOptions` generics when those commands don't have their own
    // options and it's cleaner for us to do that than `Record<string, unknown>`.
    "@typescript-eslint/no-empty-object-type": "off",

    // We already have top-level error handling across the codebase, so this rule is not helpful for us.
    "try-catch-failsafe/json-parse": "off",

    /**
     * Because our command classes have a `run` method that might not always call `this` we need to
     * explicitly exclude `run` from this rule.
     */
    "class-methods-use-this": ["error", { "exceptMethods": ["run"] }],

    /**
     * This is a small rule to prevent us from using console.log() statements in our commands.
     *
     * We've had troubles in the past where our test coverage required us to use Vitest mocks for
     * console.log() calls, hurting our ability to write resilient tests and easily debug issues.
     *
     * We should be returning Promise-wrapped values in our main command functions
     * so we can write robust tests and take advantage of `bin/run.js` and `src/baseCommand.ts`,
     * which we use for printing function outputs and returning correct exit codes.
     *
     * Furthermore, we should also be using our custom loggers (see src/lib/logger.js)
     * instead of using console.info() or console.warn() statements.
     */
    "no-console": "warn",

    "no-restricted-syntax": "off",

    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "ci-info",
            "message": "The `ci-info` package is difficult to test because misleading results will appear when running tests in the GitHub Actions runner. Instead of importing this package directly, create a wrapper function in `lib/isCI.ts` and import that instead.",
          },
        ],
      },
    ],

    // This rule is only really applicable for OSS libraries and doesn't apply to rdme's case.
    "readme/no-dual-exports": "off",
  },
}
